# Test cases for base_geometry module

class BaseGeometry:
    """
    class BaseGeometry
    """
    def area(self):
        """public instance method that raises an Exception"""
        raise Exception("area() is not implemented")
    def integer_validator(self, name, value):
        """
        you can assume name is always a string
        public instance method that validates value
        if value is not an integer, TypeError exception is raised       if value is less/equal to 0, ValueError exception is raised
        """
        if not isinstance(value, int):
            raise TypeError(f"{name} must be an integer")
        if value <= 0:
            raise ValueError(f"{name} must be greater than 0")

# Test case 1: public instance method that raises an Exception
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test case 2: value is not an integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

# Test case 3: value is greater than 0
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

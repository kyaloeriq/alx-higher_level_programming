# Test cases for base_geometry module

# Define BaseGeometry class 
>>> class BaseGeometry:
...	"""
...	class BaseGeometry
...	"""
...	def area(self):
...		"""public instance method that raises an Exception"""
...		raise Exception("area() is not implemented")
...	def integer_validator(self, name, value):
...		"""
...		you can assume name is always a string
...		public instance method that validates value
...		if value is not an integer, TypeError exception is raised
...		if value is less/equal to 0, ValueError exception is raised
...		"""
...		if not isinstance(value, int):
...			raise TypeError(f"{name} must be an integer")
...		if value <= 0:
...			raise ValueError(f"{name} must be greater than 0")

# Test case 1: public instance method that raises an Exception
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test case 2: value is not an integer
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

# Test case 3: value is greater than 0
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

# Test case 4: Check instantiation
>>> bg = BaseGeometry()

# Test cases for integer_validator() method
try:
    bg.integer_validator("age", 1)
except Exception as e:
    integer_validator_1_msg = str(e)

try:
    bg.integer_validator("age", 0)
except Exception as e:
    integer_validator_0_msg = str(e)

try:
    bg.integer_validator("age", -4)
except Exception as e:
    integer_validator_neg_msg = str(e)

try:
    bg.integer_validator("age", "4")
except Exception as e:
    integer_validator_str_msg = str(e)

try:
    bg.integer_validator("age", (4,))
except Exception as e:
    integer_validator_tuple_msg = str(e)

try:
    bg.integer_validator("age", [3])
except Exception as e:
    integer_validator_list_msg = str(e)

try:
    bg.integer_validator("age", True)
except Exception as e:
    integer_validator_bool_msg = str(e)

try:
    bg.integer_validator("age", {3, 4})
except Exception as e:
    integer_validator_set_msg = str(e)

try:
    bg.integer_validator("age", None)
except Exception as e:
    integer_validator_none_msg = str(e)

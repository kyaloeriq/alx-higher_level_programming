# Test cases for the add_integer function

>>> def add_integer(a, b=98):
...     """
    	function that adds 2 integers
   	if a and b are not integers, TypeError exception is raised
    	a and b must be first casted to integers if they are float
    	Returns an integer: the addition of a and b
	"""
...     if not (isinstance(a, int) or isinstance(a, float)):
...         raise TypeError("a must be an integer")
...     if not (isinstance(b, int) or isinstance(b, float)):
...         raise TypeError("b must be an integer")
...     if isinstance(a, float):
...         a = int(a)
...     if isinstance(b, float):
...         b = int(b)
...     return a + b

# Test case 1: Adding two positive integers
>>> add_integer(1, 2)
3

# Test case 2: Adding two negative integers
>>> add_integer(-5, -10)
-15

# Test case 3: Adding an integer and a float
>>> add_integer(7, 3.5)
10

# Test case 4: Adding a float and an integer
>>> add_integer(3.5, 7)
10

# Test case 5: Adding zero to an integer
>>> add_integer(5, 0)
5

# Test case 6: Adding zero to a float
>>> add_integer(0.0, 10)
10

# Test case 7: Adding an integer and a string (should raise TypeError)
>>> add_integer(2, '3')
Traceback (most recent call last):
	...
TypeError: b must be an integer

# Test case 8: Adding a string and an integer (should raise TypeError)
>>> add_integer('2', 3)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# Test case 9: Adding a string and a string (should raise TypeError)
>>> add_integer('2', '3')
Traceback (most recent call last):
        ...
TypeError: a must be an integer

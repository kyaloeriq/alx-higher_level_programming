# Test cases for the matrix_divided function

>>> def matrix_divided(matrix, div):
	"""
	divides all elements of a matrix
	it is a list of lists of integers/floats, otherwise TypeError is raised
	rows of matrix must be of the same size, otherwise TypeError is raised
	div must be a number (integer or float), otherwise TypeError is raised
	div canâ€™t be equal to 0, otherwise ZeroDivisionError is raised
	Arguments:
		matrix: Matrix to be divided
		div: Number to divide the matrix by
	"""
	if not (isinstance(div, int) or isinstance(div, float)):
		raise TypeError("div must be a number")
	if div == 0:
		raise ZeroDivisionError("division by zero")
	row_len = len(matrix[0])
	for row in matrix:
	     	if len(row) != row_len:
        		raise TypeError("Each row of the matrix must have the same size")
		for num in row:
			if not isinstance(num, (int, float)):
				raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
	return [[round(num / div, 2) for num in row] for row in matrix]

	# Test case 1: Matrix is a list of lists of integers/floats (should raise TypeError)
	>>> matrix_divided([[1, 2, 3], [4, "a", 6]], 2)
	Traceback (most recent call last):
        	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	# Test case 2: Each row of the matrix must have the same size (should raise TypeError)
	>>> matrix_divided([[1, 2, 3], [4, 5]], 2)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

	# Test case 3: Division by zero (should raise ZeroDivisionError)
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

	# Test case 4: Dividing a matrix by a number
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

	# Test case 5: Dividing a matrix by a float number
	>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 1.5)
	[[1.0, 1.67], [2.33, 3.0]]
